#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class MyMacd : Strategy
	{
		private MACDBBLINES MACDBBLINES1;
		private WaveTrendV2 WaveTrendV21;

		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Entry off the Wave Alert & MacdBB zero line";
				Name										= "MyMacd";
				Calculate									= Calculate.OnBarClose;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 2;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= true;
				StartMatin						= DateTime.Parse("01:00", System.Globalization.CultureInfo.InvariantCulture);
				StopMatin						= DateTime.Parse("12:00", System.Globalization.CultureInfo.InvariantCulture);
				TP					= 40;
				SL					= 40;
				UseWaveTrend					= true;
			}
			else if (State == State.Configure)
			{
			}
			else if (State == State.DataLoaded)
			{				
				MACDBBLINES1				= MACDBBLINES(Close, 12, 26, 5, Brushes.Lime, Brushes.Red, 1, 10, 50, Brushes.LightBlue, true, Brushes.Gold, Brushes.Gold);
				WaveTrendV21				= WaveTrendV2(Close, 10, 21);
				SetProfitTarget("", CalculationMode.Ticks, TP);
				SetStopLoss("", CalculationMode.Ticks, SL, false);
				SetProfitTarget(@"WaveTrendLong", CalculationMode.Ticks, 15);
				SetStopLoss(@"WaveTrendLong", CalculationMode.Ticks, 15, false);
			}
		}

		protected override void OnBarUpdate()
		{
			if (BarsInProgress != 0) 
				return;

			if (CurrentBars[0] < 2)
				return;

			 // Set 1
			if ((CrossAbove(MACDBBLINES1.Macd, 0, 2))
				 && (CrossAbove(WaveTrendV21, 0, 1)))
			{
				Draw.ArrowUp(this, "MacdAboveCross123" + CurrentBar, true, 0, Low[0] - TickSize, Brushes.Blue);


				//EnterLong(Convert.ToInt32(DefaultQuantity), "");
			}
			
			/*if (CrossAbove(WaveTrendV21, 0, 1)) {
				Draw.ArrowUp(this, "MacdAboveCross123456" + CurrentBar, true, 0, Low[0] - 6* TickSize, Brushes.Black);
			}*/
			
			
			// (Times[0][0].TimeOfDay >= StartMatin.TimeOfDay)
			//	 && (Times[0][0].TimeOfDay <= StopMatin.TimeOfDay)
			 // Set 2
			if ( (CrossBelow(MACDBBLINES1.Macd, 0, 2))
				&& (CrossBelow(WaveTrendV21, 0, 1)))
			{
				Draw.ArrowDown(this, "MacdAboveCross" + CurrentBar , true, 0, High[0] + TickSize, Brushes.Red);


				//EnterShort(Convert.ToInt32(DefaultQuantity), "");
			}
			
			/*if (CrossBelow(WaveTrendV21, 0, 1)) {
				Draw.ArrowDown(this, "MacdAboveCross321" + CurrentBar , true, 0, High[0] + 6*TickSize, Brushes.Black);
			}*/
			
		}

		#region Properties
		[NinjaScriptProperty]
		[PropertyEditor("NinjaTrader.Gui.Tools.TimeEditorKey")]
		[Display(Name="StartMatin", Order=1, GroupName="Parameters")]
		public DateTime StartMatin
		{ get; set; }

		[NinjaScriptProperty]
		[PropertyEditor("NinjaTrader.Gui.Tools.TimeEditorKey")]
		[Display(Name="StopMatin", Order=2, GroupName="Parameters")]
		public DateTime StopMatin
		{ get; set; }

		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="TP", Order=3, GroupName="Parameters")]
		public int TP
		{ get; set; }

		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="SL", Order=4, GroupName="Parameters")]
		public int SL
		{ get; set; }

		[NinjaScriptProperty]
		[Display(Name="UseWaveTrend", Order=5, GroupName="Parameters")]
		public bool UseWaveTrend
		{ get; set; }
		#endregion

	}
}
