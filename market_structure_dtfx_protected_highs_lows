#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
using Drawing = NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies.dtfx
{
	public class dtfx : Strategy
	{
		
		
		private List<double> arrayMarkGannML = new List<double> { 0, 0, 0 };
        private List<double> arrayMarkChoChGannML = new List<double> { 0, 0, 0, 0, 0, 0 };
        private List<double> arrayXF0GannML = new List<double>();
        private List<double> arrayYF0GannML = new List<double>();
        private List<double> arrayXF1GannML = new List<double>();
        private List<double> arrayYF1GannML = new List<double>();
        private List<Drawing.Line> arrayLineF1GannML = new List<Drawing.Line>();
		//private Drawing.Line[] arrayLineF1GannML = new Drawing.Line[500];
        private List<double> arraySXF1GannML = new List<double>();
        private List<double> arraySYF1GannML = new List<double>();
        private List<Drawing.Line> arraySLineF1GannML = new List<Drawing.Line>();
		
		private List<Drawing.Line> arrayLineMiddlePoint = new List<Drawing.Line>();

        private bool showF1GannML = false;
        private bool showSF1GannML = true;
        private Color colorF1GannML = Color.Black;
        private bool showChoChF1GannML = false;
        private bool showChoChSF1GannML = true;

        private int dottedLineWidth = 1;
        private int solidLineWidth = 2;
        private int dashedLineWidth = 3;

        private float highPrev;
        private float lowPrev;
		
        // Other variables and properties...
		
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Strategy here.";
				Name										= "dtfx";
				Calculate									= Calculate.OnBarClose;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= true;
			}
			else if (State == State.Configure)
			{
			}
		}
		
		private void f_CalculateAndDrawFn1(double _pointX, double _pointY)
		{
		    //F0 : Song cua nen
		    arrayXF0GannML.Insert(0, _pointX);
		    arrayYF0GannML.Insert(0, _pointY);

		    //F1,F2,...: Song cua song theo Gann
		    if (showF1GannML || showSF1GannML)
		    {
		        int drawF1 = f_CalculateFn1(_pointX, _pointY, arrayXF0GannML, arrayYF0GannML, arrayXF1GannML, arrayYF1GannML);
		        f_CalculateDrawF(showF1GannML ? drawF1 : 0, showChoChF1GannML, arrayLineF1GannML, arrayXF1GannML, arrayYF1GannML, showChoChF1GannML, arrayMarkChoChGannML, 0, colorF1GannML);
		       // f_CalculateDrawF(showF1GannML?drawF1:0,showSF1GannML,arrayLineF1GannML,arrayXF1GannML,arrayYF1GannML,showChoChF1GannML,arrayMarkChoChGannML,0,colorF1GannML)

				if (drawF1 > 0 && (showSF1GannML))
		        {
		            int drawSF1 = f_CalculateSFn1(_pointX, _pointY, arrayMarkChoChGannML, 0, arraySXF1GannML, arraySYF1GannML);
		            f_CalculateDrawSF(showSF1GannML ? drawSF1 : 0, arrayLineF1GannML, arraySLineF1GannML, arraySXF1GannML, arraySYF1GannML, arrayMarkChoChGannML, 1, colorF1GannML);
		        }
		    }
		}

		private void f_CalculateAndDraw(double _pointX, double _pointY1, double _pointY2)
		{
		    if ((arrayYF0GannML[0] > _pointY1 && arrayYF0GannML[0] > _pointY2) || (arrayYF0GannML[0] < _pointY1 && arrayYF0GannML[0] < _pointY2))
		    {
		        f_CalculateAndDrawFn1(Time[0], arrayYF0GannML[1]);
		    }
		    f_CalculateAndDrawFn1(Time[0], _pointY1);
		    f_CalculateAndDrawFn1(Time[0], _pointY2);
		}

        private double f_CalculateF0(double _pointX, double _pointY, List<double> arrayX0, List<double> arrayY0)
        {
            arrayX0.Insert(0, _pointX);
            arrayY0.Insert(0, _pointY);
            return 1;
        }

        private double f_CalculateFn1(double _pointX, double _pointY, List<double> arrayXn, List<double> arrayYn, List<double> arrayXFn1, List<double> arrayYFn1)
        {
            double _resultdraw = 0;

            if ((arrayYFn1[0] >= arrayYFn1[1] && arrayYn[0] < arrayYFn1[1]) || (arrayYFn1[0] <= arrayYFn1[1] && arrayYn[0] > arrayYFn1[1]))
            {
                arrayXFn1.Insert(0, _pointX);
                arrayYFn1.Insert(0, _pointY);
                _resultdraw = 1;
            }
            else if (arrayYFn1[0] >= arrayYFn1[1] && (arrayYn[0] < arrayYn[1] && arrayYn[0] < arrayYn[2] && arrayYn[1] < arrayYn[3]) && arrayYn[2] < arrayYn[3])
            {
                arrayXFn1.Insert(0, _pointX);
                arrayYFn1.Insert(0, _pointY);
                _resultdraw = 1;
            }
            else if (arrayYFn1[0] <= arrayYFn1[1] && (arrayYn[0] > arrayYn[1] && arrayYn[0] > arrayYn[2] && arrayYn[1] > arrayYn[3]) && arrayYn[2] > arrayYn[3])
            {
                arrayXFn1.Insert(0, _pointX);
                arrayYFn1.Insert(0, _pointY);
                _resultdraw = 1;
            }
            else if (arrayYFn1[0] >= arrayYFn1[1] && _pointY >= arrayYFn1[0] && (_pointY >= arrayYFn1[0] || (arrayYn[0] > arrayYn[2] && arrayYn[2] > arrayYn[1]) || (arrayYn[0] > arrayYn[1] && arrayYn[1] > arrayYn[2] && arrayYn[2] > arrayYn[3])))
            {
                arrayXFn1[0] = _pointX;
                arrayYFn1[0] = _pointY;
                _resultdraw = 2;
            }
            else if (arrayYFn1[0] <= arrayYFn1[1] && _pointY <= arrayYFn1[0] && (_pointY <= arrayYFn1[0] || (arrayYn[0] < arrayYn[2] && arrayYn[2] < arrayYn[1]) || (arrayYn[0] < arrayYn[1] && arrayYn[1] < arrayYn[2] && arrayYn[2] < arrayYn[3])))
            {
                arrayXFn1[0] = _pointX;
                arrayYFn1[0] = _pointY;
                _resultdraw = 2;
            }

            return _resultdraw;
        }

        public double f_CalculateSFn1(double _pointX, double _pointY, List<double> _arrayMark, double _mIdxMark, List<double> arraySXFn1, List<double> arraySYFn1)
        {
            double _resultdraw = 0;

            if (_arrayMark[_mIdxMark] == 0)
            {
                if ((arraySYFn1[0] >= arraySYFn1[1] && _pointY >= arraySYFn1[0]) || (arraySYFn1[0] <= arraySYFn1[1] && _pointY <= arraySYFn1[0]))
                {
                    arraySXFn1[0] = _pointX;
                    arraySYFn1[0] = _pointY;
                    _resultdraw = 2;
                }
                else if ((arraySYFn1[0] >= arraySYFn1[1] && _pointY < arraySYFn1[1]) || (arraySYFn1[0] <= arraySYFn1[1] && _pointY > arraySYFn1[1]))
                {
                    arraySXFn1.Insert(0, _pointX);
                    arraySYFn1.Insert(0, _pointY);
                    _resultdraw = 1;
                }
                else if ((arraySYFn1[0] >= arraySYFn1[1] && _pointY < arraySYFn1[0] && _pointY > arraySYFn1[1]) || (arraySYFn1[0] <= arraySYFn1[1] && _pointY > arraySYFn1[0] && _pointY < arraySYFn1[1]))
                {
                    arraySXFn1.Insert(0, _pointX);
                    arraySYFn1.Insert(0, _pointY);
                    _arrayMark[_mIdxMark] = _pointY;
                    _resultdraw = 1;
                }
            }
            else if (_arrayMark[_mIdxMark] > 0)
            {
                if ((arraySYFn1[0] >= arraySYFn1[1] && _pointY < arraySYFn1[1]) || (arraySYFn1[0] <= arraySYFn1[1] && _pointY > arraySYFn1[1]))
                {
                    arraySXFn1.Insert(0, _pointX);
                    arraySYFn1.Insert(0, _pointY);
                    _arrayMark[_mIdxMark] = 0;
                    _resultdraw = 1;
                }
                else if ((arraySYFn1[0] >= arraySYFn1[1] && _pointY > arraySYFn1[2]) || (arraySYFn1[0] <= arraySYFn1[1] && _pointY < arraySYFn1[2]))
                {
                    arraySXFn1[0] = _pointX;
                    arraySYFn1[0] = _pointY;
                    _arrayMark[_mIdxMark] = 0;
                    _resultdraw = 2;
                }
                else if ((arraySYFn1[0] >= arraySYFn1[1] && _pointY <= arraySYFn1[2] && _pointY >= arraySYFn1[0]) || (arraySYFn1[0] <= arraySYFn1[1] && _pointY >= arraySYFn1[2] && _pointY <= arraySYFn1[0]))
                {
                    arraySXFn1[0] = _pointX;
                    arraySYFn1[0] = _pointY;
                    _arrayMark[_mIdxMark] = _pointY;
                    _resultdraw = 2;
                }
            }

            return _resultdraw;
        }

        public void f_CalculateRemoveDuplicateLine(List<Drawing.Line> arrayLine, List<Drawing.Line> arraySLine)
        {
            if (arraySLine.Count > 1 && arrayLine.Count > 1)
            {
                Line sLine = arraySLine[1];
                Line line = arrayLine[1];

                if (sLine.GetY1() == line.GetY1() && sLine.GetY2() == line.GetY2() && sLine.GetX1() == line.GetX1() && sLine.GetX2() == line.GetX2())
                {
                    line.Dispose();
                    arrayLine.RemoveAt(1);
                }
            }
        }
		
		
        public Tuple<double, float> f_CalculateChoCh(List<double> arraySXFn1, List<float> arraySYFn1)
        {
            int _X = 0;
            float _Y = 0;

            if ((arraySYFn1[3] > arraySYFn1[2] && arraySYFn1[3] < arraySYFn1[1] && arraySYFn1[0] < arraySYFn1[2]) || (arraySYFn1[3] < arraySYFn1[2] && arraySYFn1[3] > arraySYFn1[1] && arraySYFn1[0] > arraySYFn1[2]))
            {
                _X = arraySXFn1[2];
                _Y = arraySYFn1[2];
            }

            return Tuple.Create(_X, _Y);
        }

        public void f_CalculateDrawF(double _drawF, bool _showSF, List<Drawing.Line> arrayLine, List<int> arrayX, List<float> arrayY, bool showChoCh, List<float> arrayMChoCh, int idxChoCh, Color _color)
        {
            if (_drawF > 0)
            {
                if (_drawF == 1)
                {
                    Line line = new Line(arrayX[1], arrayY[1], arrayX[0], arrayY[0]);
                    line.Color = _color;
                    line.XLocation = XLocation.BarTime;
                    line.Width = dottedLineWidth;
                    line.Style = LineStyle.Dotted;
                    arrayLine.Insert(0, line);
                }
                else if (_drawF == 2 && arrayLine.Count > 0)
                {
                    Line line = arrayLine[0];
                    line.SetXY2(arrayX[0], arrayY[0]);

                    Tuple<int, float> choCh = f_CalculateChoCh(arrayX, arrayY);

                    if (showChoCh && choCh.Item2 > 0 && arrayMChoCh[idxChoCh] != choCh.Item2)
                    {
                        arrayMChoCh[idxChoCh] = choCh.Item2;

                        Line lineChoCh = new Line(choCh.Item1, choCh.Item2, (int)Time[0], choCh.Item2);
                        lineChoCh.Color = _color;
                        lineChoCh.XLocation = XLocation.BarTime;
                        lineChoCh.Width = dottedLineWidth;
                        lineChoCh.Style = LineStyle.Dotted;
                    }
                }
            }
        }

        public void f_CalculateDrawSF(int _drawSF, List<Drawing.Line> arrayLine, List<Drawing.Line> arraySLine, List<double> arraySX, List<float> arraySY, bool showChoCh, List<float> arrayMChoCh, int idxChoCh, Color _color)
        {
            if (_drawSF > 0)
            {
                if (_drawSF == 1)
                {
                    Line line = new Line(arraySX[1], arraySY[1], arraySX[0], arraySY[0]);
                    line.Color = _color;
                    line.XLocation = XLocation.BarTime;
                    line.Width = solidLineWidth;
                    arraySLine.Insert(0, line);
                }
                else if (_drawSF == 2 && arraySLine.Count > 0)
                {
                    Line line = arraySLine[0];
                    line.SetXY2(arraySX[0], arraySY[0]);

                    f_CalculateRemoveDuplicateLine(arrayLine, arraySLine);

                    Tuple<int, float> choCh = f_CalculateChoCh(arraySX, arraySY);

                    if (showChoCh && choCh.Item2 > 0 && arrayMChoCh[idxChoCh] != choCh.Item2)
                    {
                        arrayMChoCh[idxChoCh] = choCh.Item2;

                        Line lineChoCh = new Line(choCh.Item1, choCh.Item2, (int)Time[0], choCh.Item2);
                        lineChoCh.Color = _color;
                        lineChoCh.XLocation = XLocation.BarTime;
                        lineChoCh.Width = dashedLineWidth;
                        lineChoCh.Style = LineStyle.Dashed;
                    }
                }
            }
        }

		/*
        public void f_CalculateAndDrawFn1(double _pointX, double _pointY)
        {
            arrayXF0GannML.Insert(0, _pointX);
            arrayYF0GannML.Insert(0, _pointY);

            if (showF1GannML || showF2GannML || showF3GannML || showSF1GannML || showSF2GannML || showSF3GannML)
            {
                int drawF1 = f_CalculateFn1(_pointX, _pointY, arrayXF0GannML, arrayYF0GannML, arrayXF1GannML, arrayYF1GannML);
                f_CalculateDrawF(showF1GannML ? drawF1 : 0, showSF1GannML, arrayLineF1GannML, arrayXF1GannML, arrayYF1GannML, showChoChF1GannML, arrayMarkChoChGannML, 0, colorF1GannML);

                if (drawF1 > 0 && (showF2GannML || showF3GannML || showSF1GannML || showSF2GannML || showSF3GannML))
                {
                    int drawSF1 = f_CalculateSFn1(_pointX, _pointY, arrayMarkGannML, 0, arraySXF1GannML, arraySYF1GannML);
                    f_CalculateDrawSF(showSF1GannML ? drawSF1 : 0, arrayLineF1GannML, arraySLineF1GannML, arraySXF1GannML, arraySYF1GannML, showChoChSF1GannML, arrayMarkChoChGannML, 1, colorF1GannML);
                }
            }
        }
		*/

        public void f_CalculateAndDraw(double _pointX, float _pointY1, float _pointY2)
        {
            if ((arrayYF0GannML[0] > _pointY1 && arrayYF0GannML[0] > _pointY2) || (arrayYF0GannML[0] < _pointY1 && arrayYF0GannML[0] < _pointY2))
            {
                f_CalculateAndDrawFn1(Time[0], arrayYF0GannML[1]);
            }

            f_CalculateAndDrawFn1(Time[0], _pointY1);
            f_CalculateAndDrawFn1(Time[0], _pointY2);
        }

        private void DrawBox(int left, float top, int right, float bottom, Color bgColor, Color borderColor)
        {
            // Implement the drawing of a box using NinjaTrader's drawing tools
        }

		
		

		protected override void OnBarUpdate()
		{
			//Add your custom strategy logic here.
		}
	}
}
