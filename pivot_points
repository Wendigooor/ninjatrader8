#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class PivotPointsV2 : Strategy
	{
		#region GlobalVariables
		
		private double hprice = 0.0;
        private double lprice = 0.0;
		private double prevHprice = 0.0;
        private double prevLprice = 0.0;
        private bool le = false;
        private bool se = false;
		private bool prevLe = false;
        private bool prevSe = false;
		
		private Order myEntryLongOrder = null;
		private int barNumberOfLongOrder = 0;
		
		private Order myEntryShortOrder = null;
		private int barNumberOfShortOrder = 0;
		
		#endregion
		
		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Strategy here.";
				Name										= "PivotPointsV2";
				Calculate									= Calculate.OnBarClose;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= true;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelClose;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= false;
				
				
				
				pivotLeftBars = 4;
				//pivotRightBars = 4;
				
				stopLossTicks = 35;
				profitTargetTicks = 99;				
			}
			else if (State == State.Configure)
			{
			}
		}

		protected override void OnBarUpdate()
		{
			if (CurrentBar < BarsRequiredToTrade)
				return;

			// real shiet
			updatePivotValues();
			
			//Print("Time:"+ Time[0] + " le: " + le + " se: " + se + " || hprice: " + hprice + " lprice: " + lprice);

			
			if (se) {
				//  && !isShort()
				// && lprice != prevLprice
				double enterPrice = lprice - TickSize;
				EnterShortStopMarket(enterPrice);
				
				Print("Time:"+ Time[0] + " Short enterPrice: " + enterPrice);
				
				SetStopLoss(CalculationMode.Ticks, stopLossTicks);
				SetProfitTarget(CalculationMode.Ticks, profitTargetTicks);
			}
			
			if (le) {
				//  && !isLong() 
				// && hprice != prevHprice
				double enterPrice = hprice + TickSize;
				EnterLongStopMarket(enterPrice);
				
				Print("Time:"+ Time[0] + " Long enterPrice: " + enterPrice);
				
				SetStopLoss(CalculationMode.Ticks, stopLossTicks);
				SetProfitTarget(CalculationMode.Ticks, profitTargetTicks);
			}
			
			prevLe = le;
			prevHprice = hprice;
			
			prevSe = se;
			prevLprice = lprice;
			
		}

		#region pivotFunctions
		
		private void updatePivotValues() {
			double swh = FunHigh(pivotLeftBars);
			double swl = FunLow(pivotLeftBars);
			
			hprice = 0.0;
			le = false;
			
			bool swhCondition = !double.IsNaN(swh);
			hprice = swhCondition ? swh : prevHprice;
			

			if (swhCondition)
			    le = true;
			else
			{
			    bool closeCondition = Close[1] > hprice;
			    le = prevLe && closeCondition ? false : prevLe;
			}
			
			lprice = 0.0;
			se = false;
			
			bool swlCondition = !double.IsNaN(swl);
			lprice = swlCondition ? swl : prevLprice;

			if (swlCondition)
			    se = true;
			else
			{
			    bool closeCondition = Close[1] < lprice;
			    se = prevSe && closeCondition ? false : prevSe;
			}
			
			//Print("Time2:"+ Time[0] + " le: " + le + " se: " + se + " hprice: " + hprice + " lprice: " + lprice);
		}
		
		private double FunLow(int len)
		{
		    double p = Low[len-1];
		    bool isFound = true;
      
		    for (int i = 0; i < len; i++)
		    {
		        if (Low[i] < p)
		        {
		            isFound = false;
		            break;
		        }
		    }
		    
		    if (isFound)
		    {
		        for (int i = len + 1; i < 2 * len + 1; i++)
		        {
		            if (Low[i-1] <= p)
		            {
		                isFound = false;
		                break;
		            }
		        }
		    }
		    
		    if (isFound)
		        return p;
		    
		    return double.NaN; // Return NaN if the condition is not met
		}
		
		private double FunHigh(int len)
		{
		    double p = High[len-1];
		    bool isFound = true;
		    
		    for (int i = 0; i < len; i++)
		    {
		        if (High[i] > p)
		        {
		            isFound = false;
		            break;
		        }
		    }
		    
		    if (isFound)
		    {
		        for (int i = len + 1; i < 2 * len + 1; i++)
		        {
		            if (High[i-1] >= p)
		            {
		                isFound = false;
		                break;
		            }
		        }
		    }
		    
		    if (isFound)
		        return p;
		    
		    return double.NaN; // Return NaN if the condition is not met
		}
		#endregion
		
		#region otherFunctions
		private bool isLong()
		{
		    return Position.MarketPosition == MarketPosition.Long;
		}

		private bool isShort()
		{
		    return Position.MarketPosition == MarketPosition.Short;
		}
		#endregion
		
		#region Properties
		
		[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Pivot Left Bars", GroupName = "Pivot", Order = 0)]
		public int pivotLeftBars
		{ get; set; }

		/*[Range(1, int.MaxValue), NinjaScriptProperty]
		[Display(ResourceType = typeof(Custom.Resource), Name = "Pivot Right Bars", GroupName = "Pivot", Order = 1)]
		public int pivotRightBars
		{ get; set; }*/

		[NinjaScriptProperty]
		[Range(1, 1024)]
		[Display(Name="Stop Loss Ticks", Description="Stop Loss Ticks", Order=10, GroupName="Order Params")]
		public int stopLossTicks
		{ get; set; }

		[NinjaScriptProperty]
		[Range(1, 1024)]
		[Display(Name="profitTargetTicks", Description="profit Target Ticks", Order=11, GroupName="Order Params")]
		public int profitTargetTicks
		{ get; set; }

		#endregion	
	}	
}
