#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.Indicators;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Strategies in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Strategies
{
	public class EMASMACrossiERRORSiHANDLING : Strategy
	{
		private bool FlipFlop;

		private EMA EMA1;
		private SMA SMA1;

		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"Enter the description for your new custom Strategy here.";
				Name										= "EMASMACrossiERRORSiHANDLING";
				Calculate									= Calculate.OnBarClose;
				EntriesPerDirection							= 1;
				EntryHandling								= EntryHandling.AllEntries;
				IsExitOnSessionCloseStrategy				= true;
				ExitOnSessionCloseSeconds					= 30;
				IsFillLimitOnTouch							= false;
				MaximumBarsLookBack							= MaximumBarsLookBack.TwoHundredFiftySix;
				OrderFillResolution							= OrderFillResolution.Standard;
				Slippage									= 0;
				StartBehavior								= StartBehavior.WaitUntilFlat;
				TimeInForce									= TimeInForce.Gtc;
				TraceOrders									= false;
				RealtimeErrorHandling						= RealtimeErrorHandling.StopCancelCloseIgnoreRejects;
				StopTargetHandling							= StopTargetHandling.PerEntryExecution;
				BarsRequiredToTrade							= 20;
				// Disable this property for performance gains in Strategy Analyzer optimizations
				// See the Help Guide for additional information
				IsInstantiatedOnEachOptimizationIteration	= false;
				Target					    = 26;
				Stoploss					= 38;
				ShortEMA					= 5;
				LongEMA					    = 21;
				FlipFlop					= true;
			}
			else if (State == State.Configure)
			{
			}
			else if (State == State.DataLoaded)
			{				
				EMA1				= EMA(Close, 9);
				SMA1				= SMA(Close, 16);
				EMA1.Plots[0].Brush = Brushes.Goldenrod;
				SMA1.Plots[0].Brush = Brushes.SeaShell;
				AddChartIndicator(EMA1);
				AddChartIndicator(SMA1);
				
			}
		}

		protected override void OnBarUpdate()
		{
			if (BarsInProgress != 0) 
				return;

			if (CurrentBars[0] < 1)
				return;

			 // Set 1
			if (CrossAbove(EMA1, SMA1, 1))
			{
				SetProfitTarget(CalculationMode.Ticks, Target);
				SetStopLoss(CalculationMode.Ticks, Stoploss);
				
				EnterLong(Convert.ToInt32(DefaultQuantity), @"Long");
				FlipFlop = false;
			}
			
			 // Set 2
			if (CrossBelow(EMA1, SMA1, 1))
			{
				SetProfitTarget(CalculationMode.Ticks, Target);
				SetStopLoss(CalculationMode.Ticks, Stoploss);
				
				EnterShort(Convert.ToInt32(DefaultQuantity), @"Short");
				FlipFlop = true;
			}
			
		}
		
		protected override void OnOrderUpdate(Cbi.Order order, double limitPrice, double stopPrice, 
		    int quantity, int filled, double averageFillPrice, 
		    Cbi.OrderState orderState, DateTime time, Cbi.ErrorCode error, string comment)
		{
			//Print(order);

		    if (order.Name == "Stop loss" && order.OrderState == OrderState.Rejected) {
		        ExitLong();
				    ExitShort();
			  }
		}

		#region Properties
		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="Target", Order=1, GroupName="Parameters")]
		public int Target
		{ get; set; }

		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="Stoploss", Order=2, GroupName="Parameters")]
		public int Stoploss
		{ get; set; }

		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="ShortEMA", Order=3, GroupName="Parameters")]
		public int ShortEMA
		{ get; set; }

		[NinjaScriptProperty]
		[Range(1, int.MaxValue)]
		[Display(Name="LongEMA", Order=4, GroupName="Parameters")]
		public int LongEMA
		{ get; set; }
		#endregion

	}
}
